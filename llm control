import os
from flask import Flask, request, render_template, redirect, url_for
from transformers import pipeline, GPT2LMHeadModel, GPT2Tokenizer
import sqlite3
from sqlite3 import Error

app = Flask(__name__)

# Initialize the model
tokenizer = GPT2Tokenizer.from_pretrained('gpt2')
model = GPT2LMHeadModel.from_pretrained('gpt2')
generator = pipeline('text-generation', model=model, tokenizer=tokenizer)

# Database setup
DATABASE = 'notes.db'

def create_connection():
    conn = None
    try:
        conn = sqlite3.connect(DATABASE)
        return conn
    except Error as e:
        print(e)
    return conn

def create_table():
    conn = create_connection()
    if conn is not None:
        try:
            c = conn.cursor()
            c.execute('''CREATE TABLE IF NOT EXISTS notes (id INTEGER PRIMARY KEY, content TEXT)''')
            conn.commit()
        except Error as e:
            print(e)
        finally:
            conn.close()

def add_note_to_db(note):
    conn = create_connection()
    if conn is not None:
        try:
            c = conn.cursor()
            c.execute("INSERT INTO notes (content) VALUES (?)", (note,))
            conn.commit()
        except Error as e:
            print(e)
        finally:
            conn.close()

def get_all_notes():
    conn = create_connection()
    notes = []
    if conn is not None:
        try:
            c = conn.cursor()
            c.execute("SELECT * FROM notes")
            notes = c.fetchall()
        except Error as e:
            print(e)
        finally:
            conn.close()
    return notes

def get_notes_text():
    notes = get_all_notes()
    return ' '.join(note[1] for note in notes)

# Create the notes table
create_table()

@app.route('/', methods=['GET', 'POST'])
def home():
    if request.method == 'POST':
        note = request.form['note']
        if note:
            add_note_to_db(note)
        return redirect(url_for('home'))
    notes = get_all_notes()
    return render_template('index.html', notes=notes)

@app.route('/ask', methods=['POST'])
def ask_llm():
    question = request.form['question']
    notes_text = get_notes_text()
    context = f"Based on these notes: {notes_text}\n\nQuestion: {question}\nAnswer:"
    
    try:
        response = generator(context, max_length=100, num_return_sequences=1)
        answer = response[0]['generated_text'].split('Answer:')[-1].strip()
    except Exception as e:
        answer = f"Error generating response: {e}"
    
    notes = get_all_notes()
    return render_template('index.html', notes=notes, answer=answer)

if __name__ == '__main__':
    app.run(debug=True)


